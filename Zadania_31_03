1. pre 0
LET fst = λp.p T
LET snd  = λp.pF
LET pre n = λnfx.snd (n(prefn f)[true, x])
LET pref n = λfp.[false,(fst p -> snd p|(f(snd p)))]
LET 0 = λfx.x

pre 0 = λnfx.snd (n(prefn f)[true, x]) 0 = λfx.snd (0(prefn f)[true, x]) = λfx.snd [true,x] = λfx.x

2. pre 1
LET fst = λp.p T
LET snd  = λp.pF
LET pre n = λnfx.snd (n(prefn f)[true, x])
LET pref n = λfp.[false,(fst p ->snd p|(f(snd p)))]
LET 0 = λfx.x
LET 1 = λfx.fx
LET [E1, E2] = λf.f E1 E2

pre 1 = λnfx.snd (n(prefn f)[true, x]) 1 = λfx.snd (1(prefn f)[true, x]) = λfx. (λp.pF) (1(prefn f)[true, x]) = λfx.1(prefn f)[true, x]F = λfx.(λfx.fx)(prefn f)[true, x]F = λfx.(prefn f)[true, x]F = λfx. λfp.[false,(fst p -> snd p|(f(snd p)))] f [true, x] F = λfx. [false, (fst [true, x] -> snd [true, x] | f(snd [true, x]))] F = λfx. [false, true -> x | fx] F = λfx. [false, x] F = λfx. (λf. f false, x) F = λfx. F false x = λfx.x


Rekurencyjna definicja mnożenia
m*n = { 
    0 dla m=0, 
    n+(m-1)*n dla m> 0 
}

LET mult n m = issero n -> 0 | add n (mult (pre n) m)

Rekurencyjna defincija potęgowania
n^m = { 
    1 dla m = 1, 
    n^(m-1) * n dla m> 0  
}

LET power n m= iszero m -> 1 | mult n (power n (pre m))

3. mult 3 2 

mult 3 2 = iszero 3 -> 0 | add 2 (mult (pre 3) 2) = add 2 (mult 2 2) = add 2 4 = 6
mult 2 2 = iszero 2 -> 0 | add 2 (mult (pre 2) 2) = add 2 (mult 1 2) = add 2 2 = 4
mult 1 2 = iszero 1 -> 0 | add 2 (mult (pre 1) 2) = add 2 (mult 0 2) = add 2 0 = 2
mult 0 2 = iszero 0 -> 0 | add 2 (mult (pre 0) 2) = 0

4. power 3 2
LET power n m= iszero m -> 1 | mult n (power n (pre m))

power 3 2 = iszero 2 -> 1 | mult 3 (power 3 (pre 2)) = mult 3 (power 3 1) = mult 3 3 = 9
power 3 1 = iszero 1 -> 1 | mult 3 (power 3 (pre 1)) = mult 3 (power 3 0) = mult 3 1 = 3
power 3 0 = iszero 0 -> 1 | mult 3 (power 3 (pre 0)) = 1


### Zdefiniować rekurencyjnie dodawanie

4. Zdefiniować implikację
LET imp x y = λxy. x -> y | T

imp F F = (λxy. x-> y | T) F F = F -> F | T = T
imp F T = (λxy. x-> y | T) F T = F -> T | T = T
imp T F = (λxy. x-> y | T) T F = T -> F | T = F
imp T T = (λxy. x-> y | T) T T = T -> T | T = T
